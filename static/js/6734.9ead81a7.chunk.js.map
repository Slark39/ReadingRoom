{"version":3,"file":"static/js/6734.9ead81a7.chunk.js","mappings":"wmBAGA,IAUaA,EAAb,SAAAC,G,QASE,SAAAD,EAAAE,G,MAAcC,EAAAD,EAAAC,IAAKC,EAAAF,EAAAE,QAASC,EAAAH,EAAAG,WAAYC,EAAAJ,EAAAI,SAAUC,EAAAL,EAAAK,kB,OAChDC,EAAAP,EAAAQ,KAAA,KAAM,CAAEF,kBAAmBA,KAA3B,MAEKJ,IAAMA,EACXK,EAAKJ,QAAUA,EACfI,EAAKH,WAAaA,EAClBG,EAAKF,SAAWA,IAAY,EAE5BE,EAAKE,mBAAqBF,EAAKE,mBAAmBC,KAAxBC,EAAAJ,IAC1BA,EAAKK,sBAAwBL,EAAKK,sBAAsBF,KAA3BC,EAAAJ,I,CAC9B,C,EAnBHP,G,EAAAD,G,sEAAA,IAAAc,EAAAd,EAAAe,UAAA,OAAAD,EAqBeE,SArBf,e,MAyBMC,K,oCAWqBC,EAAKC,SAASC,QAAQ,CAC3CC,OAAQ,yBADaC,MAAA,SAAjBC,GAGN,IAAMC,EAAUD,EAAS,GAKzB,OAHAL,EAAKC,SAASM,GAAG,eAAgBP,EAAKR,oBACtCQ,EAAKC,SAASM,GAAG,kBAAmBP,EAAKL,uBAElC,CAAEM,SAAUD,EAAKC,SAAUK,QAASA,E,qBArBvCE,OAAOC,WAAiD,IAArCD,OAAOC,SAASC,iBAErCV,EAAKC,SAAWO,OAAOC,a,sBACbT,EAAKW,W,uBACU,2GAAqBP,MAAK,SAAAQ,GAAC,IAAAC,EAAA,cAAAA,EAAA,MAAID,OAAJ,EAAIA,EAAC,SAALC,EAAkBD,CAAlB,KAA3BR,MAAA,SAAnBU,GACNd,EAAKW,WAAa,IAAIG,EAAJC,EAAA,CAChB7B,QAASc,EAAKd,QACdE,SAAUY,EAAKZ,UACXY,EAAKb,WAAa,CAAEA,WAAYa,EAAKb,YAAe,CAAC,IAE3Da,EAAKC,SAAWD,EAAKW,WAAWK,iBAAiBhB,EAAKf,IA3C3C,E,qGAuDd,CA7CH,MAAAgC,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAArB,EA+CewB,YA/Cf,eAgDI,OAAAF,QAAAG,QAAOtB,KAAKE,SACb,CAjDH,MAAAgB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAArB,EAmDe0B,WAnDf,eAoDI,OAAAJ,QAAAG,QAAOtB,KAAKE,SAASsB,QACtB,CArDH,MAAAN,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAArB,EAuDe4B,WAvDf,e,uBAwD2BzB,KAAKE,SAASC,QAAQ,CAC3CC,OAAQ,yBADaC,MAAA,SAAjBC,GAGN,OAAOA,EAAS,E,GACjB,CA5DH,MAAAY,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAArB,EA8DS6B,WAAA,WACL1B,KAAKE,SAASyB,eAAe,eAAgB3B,KAAKP,oBAClDO,KAAKE,SAASyB,eAAe,kBAAmB3B,KAAKJ,sBACtD,EAjEHC,EAmEe+B,MAnEf,e,OAoEI5B,KAAKE,SAAS0B,QAAd5B,KACK6B,iB,iBACN,CAtEH,MAAAX,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAArB,EAwEUJ,mBAAA,SAAmB+B,GAIzBxB,KAAK8B,WAAW,CAAEN,QAASA,GAC5B,EA7EH3B,EA+EUD,sBAAA,SAAsBU,GAI5BN,KAAK8B,WAAW,CAAEvB,QAASD,EAAS,IACrC,EApFHvB,CAAA,EAAyCgD,EAAAA,E","sources":["../node_modules/use-wallet/node_modules/@web3-react/walletlink-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],"names":["WalletLinkConnector","_AbstractConnector","_ref","url","appName","appLogoUrl","darkMode","supportedChainIds","_this","call","handleChainChanged","bind","_assertThisInitialized","handleAccountsChanged","_proto","prototype","activate","this","_this3","provider","request","method","then","accounts","account","on","window","ethereum","isCoinbaseWallet","walletLink","m","_m$default","WalletLink","_extends","makeWeb3Provider","e","Promise","reject","getProvider","resolve","getChainId","chainId","getAccount","deactivate","removeListener","close","emitDeactivate","emitUpdate","AbstractConnector"],"sourceRoot":""}