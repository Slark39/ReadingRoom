{"version":3,"file":"static/js/8692.4f08dfa0.chunk.js","mappings":"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","sources":["../node_modules/use-wallet/node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWalletConnectProviderOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWalletConnectProviderOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/web3-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession({\n        chainId: this.supportedChainIds && this.supportedChainIds.length > 0 ? this.supportedChainIds[0] : 1\n      })\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.walletConnectProvider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.walletConnectProvider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n    }\n  }\n\n  public async close() {\n    await this.walletConnectProvider?.close()\n  }\n}\n"],"names":["URI_AVAILABLE","UserRejectedRequestError","_Error","_this","call","name","constructor","message","_inheritsLoose","_wrapNativeSuper","Error","getSupportedChains","_ref","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","WalletConnectConnector","_AbstractConnector","config","_this2","handleChainChanged","bind","_assertThisInitialized","handleAccountsChanged","handleDisconnect","_proto","prototype","chainId","this","emitUpdate","accounts","account","emitDeactivate","walletConnectProvider","stop","removeListener","activate","_this4","enable","then","error","on","provider","wc","connected","createSession","length","emit","uri","m","_m$default","WalletConnectProvider","e","Promise","reject","getProvider","resolve","getChainId","send","getAccount","deactivate","close","_this12$walletConnect","AbstractConnector"],"sourceRoot":""}