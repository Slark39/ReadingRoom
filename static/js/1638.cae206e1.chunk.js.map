{"version":3,"file":"static/js/1638.cae206e1.chunk.js","mappings":"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","sources":["../node_modules/use-wallet/node_modules/@web3-react/portis-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","PortisConnector","_AbstractConnector","_ref","dAppId","networks","config","_ref$config","chainIds","map","n","Number","chainId","every","c","invariant","_this","call","supportedChainIds","handleOnLogout","bind","_assertThisInitialized","handleOnActiveWalletChanged","handleOnError","_proto","prototype","this","emitDeactivate","account","emitUpdate","error","emitError","activate","_this3","portis","onLogout","onActiveWalletChanged","onError","provider","enable","then","accounts","m","_m$default","Portis","e","Promise","reject","getProvider","resolve","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","_this11","close","_this13","logout","AbstractConnector"],"sourceRoot":""}