{"version":3,"file":"static/js/5395.416f426f.chunk.js","mappings":"0MAIA,IAAMA,EAAkD,CACtD,EAAG,UACH,EAAG,UACH,EAAG,UACH,GAAI,SAQOC,EAAb,SAAAC,G,QAME,SAAAD,EAAAE,G,MAAcC,EAAAD,EAAAC,OAAQC,EAAAF,EAAAE,Q,OACVC,OAAOC,KAAKP,GAAkBQ,SAASH,EAAQI,cAAzDC,EAAAA,EAAAA,IAAU,IACVC,EAAAT,EAAAU,KAAA,KAAM,CAAEC,kBAAmB,CAACR,MAA5B,MAEKD,OAASA,EACdO,EAAKN,QAAUA,E,CAChB,C,EAZHH,G,EAAAD,G,6EAAA,IAAAa,EAAAb,EAAAc,UAAA,OAAAD,EAceE,SAdf,e,wCAuB0BC,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,KAHcD,MAAA,SAAhBE,GAKN,MAAO,CAAEC,SAAUP,EAAKC,UAAUC,cAAed,QAASY,EAAKZ,QAASkB,QAAAA,E,OAbnEE,K,iBAAAR,EAAKC,U,uBACgB,qCAAoBG,MAAK,SAAAK,GAAC,IAAAC,EAAA,cAAAA,EAAA,MAAID,OAAJ,EAAIA,EAAC,SAALC,EAAkBD,CAAlB,KAA1BL,MAAA,SAAlBO,GACNX,EAAKC,UAAY,IAAIU,EACnBX,EAAKb,OACY,IAAjBa,EAAKZ,SAAkC,IAAjBY,EAAKZ,aAAgBwB,EAAY7B,EAAiBiB,EAAKZ,S,sDAUlF,CA7BH,MAAAyB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAAhB,EA+BeK,YA/Bf,eAgCI,OAAAY,QAAAE,QAAOR,KAAKP,UAAUC,cACvB,CAjCH,MAAAW,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAAhB,EAmCeoB,WAnCf,eAoCI,OAAAH,QAAAE,QAAOR,KAAKpB,QACb,CArCH,MAAAyB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAAhB,EAuCeqB,WAvCf,eAwCI,OAAAJ,QAAAE,QAAOR,KAAKP,UACTC,cACAiB,KAAK,gBACLf,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,IACT,CA5CH,MAAAQ,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAAhB,EA8CSuB,WAAA,aA9CTvB,EAgDewB,MAhDf,e,MAiDUb,K,uBAAAc,EAAKrB,UAAUsB,KAAKC,UAApBpB,MAAA,WACNkB,EAAKG,gB,GACN,CAnDH,MAAAZ,GAAA,OAAAC,QAAAC,OAAAF,EAAA,GAAA7B,CAAA,EAAwC0C,EAAAA,E","sources":["../node_modules/@web3-react/fortmatic-connector/src/index.ts"],"sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainIdToNetwork","FortmaticConnector","_AbstractConnector","_ref","apiKey","chainId","Object","keys","includes","toString","invariant","_this","call","supportedChainIds","_proto","prototype","activate","_this3","fortmatic","getProvider","enable","then","accounts","account","provider","this","m","_m$default","Fortmatic","undefined","e","Promise","reject","resolve","getChainId","getAccount","send","deactivate","close","_this11","user","logout","emitDeactivate","AbstractConnector"],"sourceRoot":""}